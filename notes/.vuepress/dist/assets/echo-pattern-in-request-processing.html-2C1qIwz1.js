import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as n,o as e}from"./app-CkV7V9eV.js";const t={};function l(h,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>在现代 Web 应用开发中，请求处理流程的复杂性日益增长。从简单的 CRUD 操作到复杂的业务逻辑处理，每一个 HTTP 请求都需要经历多个处理层次：跨域处理、身份认证、权限校验、参数验证、业务逻辑执行、日志记录等。这些横切关注点的处理通常依赖于 Spring 框架提供的过滤器（Filter）和拦截器（Interceptor）机制。</p><p>然而，在实际开发过程中，我们经常遇到这样的困境：过滤器虽然执行得最早，但无法获取到控制器的详细信息；拦截器能够访问 HandlerMethod 等丰富的上下文，却无法将这些信息有效地传递回过滤器层进行统一处理。这种单向的信息流动限制了我们在架构设计上的灵活性。</p><p>考虑一个典型的场景：我们需要记录 API 访问日志，包含请求的基本信息（IP、路径、参数）以及具体的控制器方法信息（类名、方法名、注解信息）。传统的做法要么在过滤器中记录不完整的信息，要么在拦截器中重复处理已经在过滤器中处理过的逻辑，导致代码分散和职责不清。</p><p>正是在这样的背景下，&quot;回响模式&quot;（Echo Pattern）应运而生。这个模式巧妙地利用了 Spring 框架的请求属性机制，在保持过滤器和拦截器各自职责清晰的前提下，实现了信息的双向流动，让拦截器中获取的丰富上下文信息能够&quot;回响&quot;到过滤器层，从而实现更优雅的横切关注点处理。</p><p>本文将深入探讨&quot;回响模式&quot;的设计理念、实现原理和最佳实践，并通过具体的 API 访问日志记录案例，展示如何在真实项目中应用这种模式来解决传统架构的局限性。</p><h2 id="_2-过滤器与拦截器的基本概念" tabindex="-1"><a class="header-anchor" href="#_2-过滤器与拦截器的基本概念"><span>2. 过滤器与拦截器的基本概念</span></a></h2><h3 id="过滤器-filter-的角色与职责" tabindex="-1"><a class="header-anchor" href="#过滤器-filter-的角色与职责"><span>过滤器（Filter）的角色与职责</span></a></h3><p>过滤器是 Servlet 规范的一部分，工作在 Servlet 容器级别，对所有进入 Web 应用的请求进行预处理和后处理。在 Spring Boot 应用的请求处理流程中，过滤器是最早介入的组件，具有以下特点：</p><p><strong>优势：</strong></p><ul><li>执行时机最早，能够对原始的 HTTP 请求进行处理</li><li>不依赖 Spring 容器，可以处理 Spring 管理之外的请求</li><li>适合处理通用的横切关注点，如 CORS、编码转换、请求体缓存等</li><li>可以完全控制请求的生命周期，包括是否继续执行后续处理</li></ul><p><strong>局限性：</strong></p><ul><li>无法获取 Spring MVC 的上下文信息，如 HandlerMethod、Controller 实例等</li><li>不能直接访问 Spring 的依赖注入和 AOP 功能</li><li>处理逻辑相对简单，难以实现复杂的业务判断</li></ul><h3 id="拦截器-interceptor-的特性与优势" tabindex="-1"><a class="header-anchor" href="#拦截器-interceptor-的特性与优势"><span>拦截器（Interceptor）的特性与优势</span></a></h3><p>拦截器是 Spring MVC 框架的组件，工作在 DispatcherServlet 内部，能够在请求到达控制器前后进行处理。相比过滤器，拦截器具有更丰富的上下文信息：</p><p><strong>优势：</strong></p><ul><li>可以获取 HandlerMethod，了解即将执行的控制器方法详情</li><li>能够访问 Spring 容器中的 Bean，享受依赖注入的便利</li><li>提供了更细粒度的切入点：preHandle、postHandle、afterCompletion</li><li>可以根据具体的控制器方法来决定处理逻辑</li></ul><p><strong>局限性：</strong></p><ul><li>执行时机较晚，一些基础的请求处理可能已经在过滤器层完成</li><li>只能处理 Spring MVC 管理的请求，对于静态资源等直接访问无效</li><li>无法像过滤器那样完全控制请求的执行流程</li></ul><h3 id="传统执行流程中的限制" tabindex="-1"><a class="header-anchor" href="#传统执行流程中的限制"><span>传统执行流程中的限制</span></a></h3><p>在传统的 Spring Boot 应用中，请求的执行流程遵循严格的单向模式：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>请求进入 → 过滤器链 → DispatcherServlet → 拦截器 → 控制器 → 拦截器 → DispatcherServlet → 过滤器链 → 响应返回</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这种单向流动虽然保证了处理流程的清晰性，但也带来了信息孤岛的问题：过滤器无法利用拦截器中获取的丰富上下文信息，导致在实现某些横切关注点时面临困难。</p><p>举个具体的例子，在前面提到的过滤器执行顺序表中，我们可以看到不同过滤器的职责划分：</p><ul><li><strong>CorsFilter</strong>（-2147483648）：处理跨域问题，需要最早执行</li><li><strong>TraceFilter</strong>（-2147483647）：生成链路追踪 ID，为后续处理提供追踪能力</li><li><strong>ApiAccessLogFilter</strong>（-103）：记录 API 访问日志，需要收集完整的请求信息</li></ul><p>传统方式下，ApiAccessLogFilter 只能记录基础的请求信息（如 URL、IP、请求参数），而无法获取到具体的控制器方法信息，这就限制了日志的完整性和可用性。</p><p>这正是&quot;回响模式&quot;要解决的核心问题：如何在保持现有架构清晰性的前提下，实现信息的有效回传，让过滤器也能享受到拦截器提供的丰富上下文信息。</p><h2 id="原理解析" tabindex="-1"><a class="header-anchor" href="#原理解析"><span>原理解析</span></a></h2><p>我们将会使用 HttpServletRequest 来实现。一句话描述就是：它就像是封装了一个请求信息的 map，同时我们也能往里存放信息，从而实现信息传递。</p><p>关键代码</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> preHandle</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HttpServletResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> handler) {  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 记录 HandlerMethod，提供给 Filter 使用  </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    HandlerMethod</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> handlerMethod </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> handler </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">instanceof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> HandlerMethod </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (HandlerMethod) handler </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (handlerMethod </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ATTRIBUTE_HANDLER_METHOD, handlerMethod);</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> processApiRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HttpServletResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> FilterChain</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> filterChain)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            throws ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> IOException {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        LocalDateTime</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> beginTime </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> LocalDateTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> queryString </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ServletUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getParamMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> requestBody </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ServletUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getBody</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 执行下一个过滤器</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            filterChain</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">doFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request, response);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 成功处理，记录正常日志</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            createApiAccessLog</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> beginTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> queryString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> requestBody</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> ex</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 异常处理，记录异常日志</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            createApiAccessLog</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> beginTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> queryString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> requestBody</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ex)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            throw</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32)]))}const r=s(t,[["render",l]]),d=JSON.parse('{"path":"/docs/code/backend/java/echo-pattern-in-request-processing.html","title":"请求处理流中的\\"回响模式\\"：利用拦截器为过滤器提供上下文","lang":"zh-CN","frontmatter":{"title":"请求处理流中的\\"回响模式\\"：利用拦截器为过滤器提供上下文","icon":"file","order":null,"date":"2025-04-27T00:00:00.000Z","tags":null,"description":"1. 引言 在现代 Web 应用开发中，请求处理流程的复杂性日益增长。从简单的 CRUD 操作到复杂的业务逻辑处理，每一个 HTTP 请求都需要经历多个处理层次：跨域处理、身份认证、权限校验、参数验证、业务逻辑执行、日志记录等。这些横切关注点的处理通常依赖于 Spring 框架提供的过滤器（Filter）和拦截器（Interceptor）机制。 然而，...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"请求处理流中的\\\\\\"回响模式\\\\\\"：利用拦截器为过滤器提供上下文\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-27T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WangWenpeng\\",\\"url\\":\\"hachinekooo.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://hachinekooo.github.io/docs/code/backend/java/echo-pattern-in-request-processing.html"}],["meta",{"property":"og:site_name","content":"乐观的小八"}],["meta",{"property":"og:title","content":"请求处理流中的\\"回响模式\\"：利用拦截器为过滤器提供上下文"}],["meta",{"property":"og:description","content":"1. 引言 在现代 Web 应用开发中，请求处理流程的复杂性日益增长。从简单的 CRUD 操作到复杂的业务逻辑处理，每一个 HTTP 请求都需要经历多个处理层次：跨域处理、身份认证、权限校验、参数验证、业务逻辑执行、日志记录等。这些横切关注点的处理通常依赖于 Spring 框架提供的过滤器（Filter）和拦截器（Interceptor）机制。 然而，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2025-04-27T00:00:00.000Z"}]]},"git":{},"readingTime":{"minutes":5.02,"words":1505},"filePathRelative":"docs/code/backend/java/echo-pattern-in-request-processing.md","excerpt":"<h2>1. 引言</h2>\\n<p>在现代 Web 应用开发中，请求处理流程的复杂性日益增长。从简单的 CRUD 操作到复杂的业务逻辑处理，每一个 HTTP 请求都需要经历多个处理层次：跨域处理、身份认证、权限校验、参数验证、业务逻辑执行、日志记录等。这些横切关注点的处理通常依赖于 Spring 框架提供的过滤器（Filter）和拦截器（Interceptor）机制。</p>\\n<p>然而，在实际开发过程中，我们经常遇到这样的困境：过滤器虽然执行得最早，但无法获取到控制器的详细信息；拦截器能够访问 HandlerMethod 等丰富的上下文，却无法将这些信息有效地传递回过滤器层进行统一处理。这种单向的信息流动限制了我们在架构设计上的灵活性。</p>","autoDesc":true}');export{r as comp,d as data};
