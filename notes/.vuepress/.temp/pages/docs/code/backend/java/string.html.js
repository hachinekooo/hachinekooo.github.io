import comp from "/Users/wangwenpeng/Code/area/notes/.vuepress/.temp/pages/docs/code/backend/java/string.html.vue"
const data = JSON.parse("{\"path\":\"/docs/code/backend/java/string.html\",\"title\":\"new String(\\\"abc\\\")时对象是如何创建的？\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"new String(\\\"abc\\\")时对象是如何创建的？\",\"icon\":\"file\",\"order\":null,\"category\":[\"Java\"],\"tags\":[\"面经\"],\"description\":\"abc和new 分析字节码文件可以得知： 在 Java 1.8 中，new String(\\\"abc\\\") 会创建一个新的 String 对象（在堆内存中），这个新对象会通过构造方法将常量池中的 \\\"abc\\\" 字符串的内容复制到新对象的 char[] 数组中。它并不会通过堆对象的 char[] 数组引用常量池中的对象。 常量池中的 \\\"abc\\\" 与 new S...\",\"head\":[[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"new String(\\\\\\\"abc\\\\\\\")时对象是如何创建的？\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Wang Wenpeng\\\",\\\"url\\\":\\\"hachinekooo.github.io\\\"}]}\"],[\"meta\",{\"property\":\"og:url\",\"content\":\"https://hachinekooo.github.io/docs/code/backend/java/string.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"乐观的小八\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"new String(\\\"abc\\\")时对象是如何创建的？\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"abc和new 分析字节码文件可以得知： 在 Java 1.8 中，new String(\\\"abc\\\") 会创建一个新的 String 对象（在堆内存中），这个新对象会通过构造方法将常量池中的 \\\"abc\\\" 字符串的内容复制到新对象的 char[] 数组中。它并不会通过堆对象的 char[] 数组引用常量池中的对象。 常量池中的 \\\"abc\\\" 与 new S...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"面经\"}]]},\"readingTime\":{\"minutes\":1.88,\"words\":565},\"filePathRelative\":\"docs/code/backend/java/string.md\",\"excerpt\":\"<h2>abc和new</h2>\\n<div class=\\\"language-java line-numbers-mode\\\" data-highlighter=\\\"shiki\\\" data-ext=\\\"java\\\" style=\\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\\"><pre class=\\\"shiki shiki-themes one-light one-dark-pro vp-code\\\"><code><span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">public</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\"> class</span><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\"> StringTest</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\"> {</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\\">  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">    public</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\"> static</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\"> void</span><span style=\\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\\"> main</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">(</span><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\">String</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">[] </span><span style=\\\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\\\">args</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">)</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\"> {  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\">        String</span><span style=\\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\\"> str1</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\\"> =</span><span style=\\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\\"> \\\"abc\\\"</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">;  </span><span style=\\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\\">// 仅在常量池中创建对象  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\">        String</span><span style=\\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\\"> str2</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\\"> =</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\"> new</span><span style=\\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\\"> String</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">(</span><span style=\\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\\">\\\"abc\\\"</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">);  </span><span style=\\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\\">// 可能创建1个或2个对象  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">        }</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\\">  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">}</span></span></code></pre>\\n<div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\" style=\\\"counter-reset:line-number 0\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
