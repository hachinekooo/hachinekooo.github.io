import comp from "/Users/wangwenpeng/Code/area/notes/.vuepress/.temp/pages/docs/code/knowledge/decoratorPattern.html.vue"
const data = JSON.parse("{\"path\":\"/docs/code/knowledge/decoratorPattern.html\",\"title\":\"设计模式\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"设计模式\",\"icon\":\"file\",\"order\":null,\"date\":\"2024-08-19T00:00:00.000Z\",\"tags\":null,\"description\":\"单例设计模式 饿汉式 SingleModel1.java 懒汉式 SingleModel2.java 装饰器模式 装饰器模式的由来 引入 简化改进 代理模式(Proxy Pattern) 这是一个代理模式的实现，具体来说是动态代理的简化版本。让我解释一下这个设计模式的关键部分： 代理模式的核心组件： 接口(Foo)：定义了代理类和目标类共同的接口 目标...\",\"gitInclude\":[]},\"headers\":[{\"level\":2,\"title\":\"单例设计模式\",\"slug\":\"单例设计模式\",\"link\":\"#单例设计模式\",\"children\":[{\"level\":3,\"title\":\"饿汉式\",\"slug\":\"饿汉式\",\"link\":\"#饿汉式\",\"children\":[]},{\"level\":3,\"title\":\"懒汉式\",\"slug\":\"懒汉式\",\"link\":\"#懒汉式\",\"children\":[]}]},{\"level\":2,\"title\":\"装饰器模式\",\"slug\":\"装饰器模式\",\"link\":\"#装饰器模式\",\"children\":[{\"level\":3,\"title\":\"引入\",\"slug\":\"引入\",\"link\":\"#引入\",\"children\":[]},{\"level\":3,\"title\":\"简化改进\",\"slug\":\"简化改进\",\"link\":\"#简化改进\",\"children\":[]}]},{\"level\":2,\"title\":\"代理模式(Proxy Pattern)\",\"slug\":\"代理模式-proxy-pattern\",\"link\":\"#代理模式-proxy-pattern\",\"children\":[]}],\"readingTime\":{\"minutes\":3.15,\"words\":944},\"filePathRelative\":\"docs/code/knowledge/decoratorPattern.md\",\"localizedDate\":\"2024年8月19日\",\"excerpt\":\"<h2>单例设计模式</h2>\\n<h3>饿汉式</h3>\\n<p><code>SingleModel1.java</code></p>\\n<div class=\\\"language-java line-numbers-mode\\\" data-highlighter=\\\"shiki\\\" data-ext=\\\"java\\\" data-title=\\\"java\\\" style=\\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\\"><pre class=\\\"shiki shiki-themes one-light one-dark-pro vp-code\\\"><code><span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">public</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\"> class</span><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\"> SingleModel1</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\"> {</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\\">  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\\\">    //使用 static ，让类在加载时就直接创建好一个对象。  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">    private</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\"> static</span><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\"> SingleModel1</span><span style=\\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\\"> obj </span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\\">=</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\"> new</span><span style=\\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\\"> SingleModel1</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\\">()</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">;</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\\">  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\\">      </span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\\\">    //构造方法，私有之后，让外不能随便调用这里进行创建对象了。  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">    private</span><span style=\\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\\"> SingleModel1</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">(){  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">          </span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">    }</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\\">  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\\\">    //static 才能访问 static，public公共的供外调用  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">    public</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\"> static</span><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\"> SingleModel1</span><span style=\\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\\"> getInstance</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">()</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\"> {  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">        return</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\"> obj;  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">    }</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\\">  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">}</span></span></code></pre>\\n<div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\" style=\\\"counter-reset:line-number 0\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
